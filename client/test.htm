<script type="text/javascript" src="/js/json2.js"></script>
<script type="text/javascript" src="/js/jquery.min.js"></script>
<script type="text/javascript" src="/js/socket.io.js"></script>
<script type="text/javascript" src="/js/config.js"></script>
<script type="text/javascript">

//
// server connection and message/event handling logic
//

io.setPath('./js/');

function serverConnection(config){

	var self = this;

	this.config = config;
	this.online = false;
	this.pingTimer = null;
	this.giveupTimer = null;
	this.lastConnected = 0;
	this.eventHandlers = {};

	this.socket = new io.Socket(config.host, {
		port: config.port
		//transports: ['xhr-polling']
	});


	//
	// set up event handlers on the socket object
	//

	this.socket.on('connect', function(){

		self.lastConnected = new Date().getTime();

		self.emit('connected');
		self.emit('state', 'connected');
	});

	this.socket.on('close', function(){
		//console.log('closed');
	});

	this.socket.on('disconnect', function(){

		self.emit('disconnected');
		self.emit('state', 'disconnected');

		// if we get disconnected, we will immediately
		// try to reconnect. if we went offline on purpose,
		// self.online will be false so reconnect() will
		// just no-op.

		self.reconnect();
	});

	this.socket.on('message', function(data){

		if (data.msg == 'pong'){
			if (!self.socket.connected) return;
			var diff = (new Date().getTime()) - data.t;
			if (diff < 0) diff = 0;
			self.emit('state', 'connected', diff);
			//console.log('lag: '+diff);
			return;
		}

		self.emit('message', data);
	});


	//
	// event handlers
	//

	this.on = function(ev, f){
		if (!self.eventHandlers[ev]){
			self.eventHandlers[ev] = [];
		}
		self.eventHandlers[ev].push(f);
	};

	this.emit = function(){
		var args = Array.prototype.slice.call(arguments);
		var ev = args.shift();
		if (self.eventHandlers[ev]){
			for (var i=0; i<self.eventHandlers[ev].length; i++){
				var f = self.eventHandlers[ev][i];
				f.apply(self, args);
			}
		}
	}


	//
	// the real guts
	//

	this.brace_for_failure = function(){

		// this timer is set up so that we can decide to just stop trying
		// after a certain period.

		if (self.giveupTimer) window.clearTimeout(self.giveupTimer);
		self.giveupTimer = window.setTimeout(function(){ self.giveup(); }, self.config.giveup_interval);
	}

	this.connect = function(){
		self.online = true;
		self.emit('state', 'connecting');

		self.brace_for_failure();
		self.socket.connect();
	}

	this.reconnect = function(){
		if (!self.online) return;
		self.emit('state', 'reconnecting');

		self.brace_for_failure();
		self.socket.connect();
	}

	this.giveup = function(){
		window.clearTimeout(self.giveupTimer);
		self.giveupTimer = null;
		if (self.socket.connected) return;

		self.emit('state', 'disconnected');
	}


	//
	// ping is a simple interval - if we're connected, send
	// a ping message. if not, do nothing
	//

	self.pingTimer = window.setInterval(function(){
		if (self.socket.connected){
			self.socket.send({msg: 'ping', t: new Date().getTime()});
		}
	}, self.config.ping_interval);


	//
	// toggle the client on and off
	//

	this.go_online = function(){
		if (self.socket.connected) return;
		self.online = true;
		self.reconnect();
	}

	this.go_offline = function(){
		self.online = false;
		if (self.socket.connected) self.socket.disconnect();
	}


	//
	// send a message
	//

	this.send = function(msg){
		self.socket.send(msg);
	};


	// delay this call so that the caller can set up event handlers
	window.setTimeout(function(){ self.connect(); }, 0);
}

///////////////////////////////////////////////

//
// let us begin
//

var con;

$(document).ready(function(){

	init_tiles();
	//return;


	//
	// connect to the game server
	//

	con = new serverConnection({
		host		: g_config.server_host,
		port		: g_config.server_port,
		ping_interval	: 3000,
		giveup_interval	: 10000
	});
	
	
	//
	// these are our connection state handlers
	//

	con.on('state', function(state, lag){
		switch (state){
			case 'connected':
				$('#con').addClass('online').removeClass('offline');
				$('#lag').text(lag ? lag+'ms' : 'Connected');
				break;

			case 'disconnected':
				$('#con').removeClass('online').addClass('offline');
				$('#lag').text('Disconnected');
				break;

			case 'connecting':
				$('#con').removeClass('online').removeClass('offline');
				$('#lag').text('Connecting...');
				break;

			case 'reconnecting':
				$('#con').removeClass('online').removeClass('offline');
				$('#lag').text('Reconnecting...');
				break;

			default:
				$('#con').removeClass('online').removeClass('offline');
				$('#lag').text('Unknown: '+state);
		}
	});


	//
	// these are our message handlers
	//

	con.on('message', function(msg){

		console.log('got a message!', msg);

		switch (msg.msg){
			case 'welcome': return handleWelcome(msg);
			case 'joined': return handleJoined(msg);
			case 'left': return handleLeft(msg);
			case 'move': return handleMoved(msg);
		}

		console.log('unhandled message', msg);
	});

	con.on('connected', function(){

		//con.send({msg: 'some data'});
	});
});

///////////////////////////////////////////////

//
// we have connected. populate player list
// this includes us!
//

function handleWelcome(msg){
	$('#onlinelistplayers').html('');
	$('#playarea').html('');

	for (var i in msg.players){
		addPlayer(i, msg.players[i]);
	}
}

var players = {};

function addPlayer(uid, p){

	var txt = uid;
	if (p.self) txt += " (you)";
	var d = $('<div>').text(txt);
	d.attr('id', 'players-'+uid);
	$('#onlinelistplayers').append(d);


	players[uid] = new player(uid, p.self, p.state);
}

//
// another player joined
//

function handleJoined(msg){
	addPlayer(msg.uid, msg.player);
}

//
// another player left
//

function handleLeft(msg){
	$('#players-'+msg.uid).remove();

	delete players[msg.uid];
}

//
// a player moved. it could be us!
//

function handleMoved(msg){

	players[msg.uid].update_state(msg.state);
}

///////////////////////////////////////////////

//
// begin drawing functions
//

//
// load an spritesheet image and prep for drawing
//

function spritemap(src){

	var self = this;

	this.img = new Image();
	this.ready = false;
	this.onready = null;

	this.img.onload = function(){
		self.ready = true;
		if (self.onready) self.onready();
	};

	this.img.src = src;

	this.blt = function(ctx, sx, sy, sw, sh, dx, dy){

		ctx.drawImage(self.img, sx, sy, sw, sh, dx, dy, sw, sh);
	};
}


//
// load a tileset image and prep for drawing
//

function tileset(src, sz){

	var self = this;

	this.img = new Image();
	this.sz = sz;
	this.ready = false;
	this.onready = null;
	this.w = 1;
	this.h = 1;

	this.img.onload = function(){
		self.w = Math.floor(self.img.width / self.sz);
		self.h = Math.floor(self.img.height / self.sz);
		self.ready = true;
		if (self.onready) self.onready();
	};

	this.img.src = src;

	this.blt = function(ctx, tile_id, x, y){

		var sx = tile_id % self.w;
		var sy = Math.floor(tile_id / self.w);

		ctx.drawImage(self.img, sx * self.sz, sy * self.sz, self.sz, self.sz, x, y, self.sz, self.sz);
	};	
}


//
// a game map takes a grid and a tileset, creates a buffer canvas and draws the entire thing onto it
//

function gameMap(grid, tileset){

	var self = this;

	this.grid = grid;
	this.tileset = tileset;


	//
	// find the size of the map in tiles
	//

	this.tw = 0;
	this.th = grid.length;

	for (var y=0; y<this.th; y++){
		if (grid[y].length > this.tw) this.tw = grid[y].length;
	}


	//
	// now we have the real size, so create the buffer
	//

	this.w = this.tw * tileset.sz;
	this.h = this.th * tileset.sz;
	this.buffer = document.createElement('canvas');
	this.buffer.width = this.w;
	this.buffer.height = this.h;


	//
	// paint the map onto the buffer
	//

	var ctx = this.buffer.getContext("2d");

	for (var y=0; y<grid.length; y++){
		for (var x=0; x<grid[y].length; x++){

			tileset.blt(ctx, grid[y][x], x * tileset.sz, y * tileset.sz);
		}
	}
}


//
// takes a tileset and draws the whole thing on a buffer canvas
// useful for finding the one you want
//

function tilesetPreview(tileset, cols, spacing){

	var num = tileset.w * tileset.h;
	var rows = Math.ceil(num / cols);

	this.buffer = document.createElement('canvas');
	this.buffer.width = cols * tileset.sz;
	this.buffer.height = rows * tileset.sz;

	var ctx = this.buffer.getContext("2d");

	for (var i=0; i<num; i++){
		var col = i % cols;
		var row = Math.floor(i / cols);

		tileset.blt(ctx, i, col * (tileset.sz + spacing), row * (tileset.sz + spacing));
	}
}


///////////////////////////////////////////////

//
// waitlist is a simple class that helps you wait for multiple events to complete.
// just hook all of the events you want to wait for up to handlers and onready will
// be fired once all of the sub-events fire. e.g.
//
// var w = new waitlist();
// map1.onready = w.add_wait();
// map2.onready = w.add_wait();
// sprites2.onready = w.add_wait();
// w.onready = function(){ ...only fires once all objects are ready... }
//

function waitlist(){

	var self = this;

	this.waiting = {};
	this.uid = 1;
	this.fired = false;
	this.onready = null;

	this.add_wait = function(){
		var u = self.uid++;
		self.waiting[u] = 0;
		return function(){
			self.waiting[u] = 1;
			self.check();
		};
	}

	this.check = function(){

		if (self.fired) return;

		for (var i in self.waiting){
			if (!self.waiting[i]) return;
		}

		self.fired = true;
		if (self.onready) self.onready();
	}
}


///////////////////////////////////////////////

var t; // the map tileset
var map1; // the map!
var ts1; // a preview of all the tiles in the map tileset
var s1; // spritemap for the players


//
// here be the map grid. entries are the tileset index
//

var map_data = [
	[13,21,21,21,21,21,21,13,13,13,14, 9, 9, 9, 9, 9, 9, 9, 9,11,13,13,13,13,13,13,13,13],
	[14, 9,51,52,10, 9,10,11,13,13,14, 9, 7, 8, 0, 1, 9, 9, 9,11,13,13,13,13,13,13,13,13],
	[14,10,53,54, 9,10, 9,11,13,13,14, 9,23,24,17,18, 9,10, 9,11,13,13,13,13,13,13,13,13],
	[14, 9,10, 9,10, 9,10,11,13,13,14, 9,33,34,29,30, 9, 9, 9,11,13,13,13,13,13,13,13,13],
	[13, 3, 6,10, 9, 2, 3,13,13,13,14, 9,39,40,35,36, 9, 9, 9,11,13,13,13,13,13,13,13,13],
	[13,13,13, 3, 3,13,13,13,13,13,14, 9, 9, 9, 9, 9, 2, 3, 3,13,13,13,13,13,13,13,13,13],
	[13,21,21,21,21,21,21,21,21,21,21, 9, 9, 9, 9, 9,11,13,13,13,13,13,13,13,13,13,13,13],
	[14, 9,42,15,15,15,15,16, 9, 9, 9, 9,10, 9, 9, 9,11,13,13,13,13,13,13,13,13,13,13,13],
	[14, 9,43,44,45,44,45,28, 9, 9, 9, 9, 9, 9, 9, 9,41,21,21,21,21,21,21,21,21,21,21,21],
	[14, 9,75,26,26,26,26,72, 9, 9, 9, 9, 9, 9,10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
];

//
// load the tileset, the map data, and the player sprite. prepare for player interaction
//

function init_tiles(){

	var wait = new waitlist();

	t = new tileset('pink_big.png', 16);
	//t = new tileset('pink.png', 8);
	s1 = new spritemap('bunnies.gif');

	t.onready = wait.add_wait();
	s1.onready = wait.add_wait();

	wait.onready = function(){

		map1 = new gameMap(map_data, t);
		ts1 = new tilesetPreview(t, 10, 2);

		window.setInterval(redraw_playarea, 50); // repaint the playarea canvas every 50ms
	}


	//
	// handle clicks on the gameplay canvas
	// currently these are just sent to the game server as moves
	//

	$('#playarea2').click(function(e){

		var x;
		var y;
		if (e.pageX || e.pageY){
			x = e.pageX;
			y = e.pageY;
		}else{
			x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
			y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
		}

		var offset = $(this).offset();

		x -= offset.left;
		y -= offset.top;

		x -= map_offset[0];
		y -= map_offset[1];


		// ignore clicks outside the map
		if (x < 0) return;
		if (y < 0) return;
		if (x >= map1.w) return;
		if (y >= map1.h) return;

		con.send({msg: 'move', x:x, y:y});
	});
}

///////////////////////////////////////////////

//
// Begin the play area, which is the canvas that the player actually sees and interacts with
//

var canvas_size = [300, 300];
var player_pos = [10,10];
var map_offset = [0,0];

function redraw_playarea(){

	var canvas = document.getElementById('playarea2');
	canvas.width = canvas_size[0];
	canvas.height = canvas_size[1];

	var ctx = canvas.getContext("2d");
	ctx.clearRect(0, 0, canvas_size[0], canvas_size[1]);

	// find the position of our player
	var player_pos = [0, 0];
	for (var i in players){
		if (players[i].is_self){
			player_pos = players[i].get_pos();
		}
	}

	// position and draw the map
	map_offset = get_map_pos(map1, player_pos);
	ctx.drawImage(map1.buffer, map_offset[0], map_offset[1]);

	// draw other players
	for (var i in players){
		if (!players[i].is_self){
			var pos = players[i].get_pos();
			s1.blt(ctx, 15, 0, 15, 22, map_offset[0]+pos[0]-7, map_offset[1]+pos[1]-22);
		}
	}

	// draw our player last
	s1.blt(ctx, 0, 0, 15, 22, map_offset[0]+player_pos[0]-7, map_offset[1]+player_pos[1]-22);
}

function get_map_pos(map, camera){

	// first, position the map to put the camera position in the middle of the canvas
	var px = (canvas_size[0] >> 1) - camera[0];
	var py = (canvas_size[1] >> 1) - camera[1];

	// then make sure we're within bounds
	if (px > 0) px = 0;
	if (py > 0) py = 0;
	if (px < 0 - (map.w - canvas_size[0])) px = 0 - (map.w - canvas_size[0]);
	if (py < 0 - (map.h - canvas_size[1])) py = 0 - (map.h - canvas_size[1]);

	// check we don't need to just center it (when map is smaller than display canvas)
	if (map.w < canvas_size[0]) px = (canvas_size[0] >> 1) - Math.round(map.w / 2);
	if (map.h < canvas_size[1]) py = (canvas_size[1] >> 1) - Math.round(map.h / 2);

	return [px, py];
}


//
// a player object. handles updating state client-side
//

function player(uid, is_self, state){

	var self = this;

	this.uid = uid;
	this.is_self = is_self;
	this.state = {};
	
	//
	// update the player's state, processing any included movement vectors
	//

	this.update_state = function(state){
		self.state = state;

		if (self.state.v){
			state.v.start = new Date().getTime();
			//self.state.x = state.v.to[0];
			//self.state.y = state.v.to[1];
		}
	};

	//
	// get the current position of this player, taking into account current movement vectors
	//

	this.get_pos = function(){

		// if they are moving, figure out where they actually are now
		if (self.state.v){
			var now = new Date().getTime();
			var frac = (now - self.state.v.start) / self.state.v.len;

			// done moving?
			if (frac >= 1){
				self.state.x = self.state.v.to[0];
				self.state.y = self.state.v.to[1];
				delete self.state.v;
			}else{
				// interpolate!
				self.state.x = Math.round(self.state.v.from[0] + frac * (self.state.v.to[0] - self.state.v.from[0]));
				self.state.y = Math.round(self.state.v.from[1] + frac * (self.state.v.to[1] - self.state.v.from[1]));
			}
		}

		return [self.state.x, self.state.y];
	};

	this.update_state(state);
}

</script>
<style>

body {
	font-family: Arial, Helvetica, sans-serif;
}

#statusbar {
	position: absolute;
	top: 0px;
	left: 20px;
	right: 20px;
	height: 20px;
	padding: 6px 20px;

	-moz-border-radius-bottomleft: 10px;
	-moz-border-radius-bottomright: 10px;
	border-bottom-left-radius: 10px;
	border-bottom-right-radius: 10px;

	border-left: 1px solid #C7C7C7;
	border-right: 1px solid #C7C7C7;
	border-bottom: 1px solid #C7C7C7;

	background-color: #fff;
	background-image: -moz-linear-gradient(center bottom, rgb(233,233,233) 0%, rgb(255,255,255) 100%);
	background-image: -webkit-gradient(linear, left bottom, left top, color-stop(1, rgb(233,233,233)), color-stop(0, rgb(255,255,255)));

	-moz-box-shadow:	inset 0 0 15px 1px rgba(255,255,255, 0.5), 0 1px 3px #999;
	-webkit-box-shadow:	inset 0 0 15px 1px rgba(255,255,255, 0.5), 0 1px 3px #999;
	box-shadow:		inset 0 0 15px 1px rgba(255,255,255, 0.5), 0 1px 3px #999;
}

#constatus {
	float: right;
	line-height: 20px;
	font-size: 12px;
	text-shadow: #fff 1px 1px;
}

#con {
	width: 16px;
	height: 16px;
	border: 1px solid #000;
	background-color: red;
	margin-right: 8px;
	float: left;
}
#con.online { background-color: lime; }
#con.offline { background-color: #999; }

#onlinelist {
	position: absolute;
	left: 30px;
	top: 100px;
	border: 1px solid #666;
	background-color: #f5f5f5;
	padding: 1em;
}

#playarea2 {
	position: absolute;
	left: 400px;
	top: 100px;
	border: 1px solid #666;
	background-color: #f5f5f5;
}

.dude {
	position: absolute;
	width: 15px;
	height: 22px;
	background-image: url(bunny.gif);
}

</style>

<div id="statusbar">
	<div id="constatus">
		<div id="con"></div>
		<span id="lag">Disconnected</span>
	</div>
</div>

<div id="onlinelist">
	<b>Players Online</b><br />
	<div id="onlinelistplayers"></div>
</div>

<canvas id="playarea2"></canvas>